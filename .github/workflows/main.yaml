name: Deploy

on:
  push:
    branches: ["main"]

jobs:
  build-api:
    name: Build API Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        id: login-aws-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push API Image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-aws-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.API_IMAGE_REPO }}
          IMAGE_TAG: latest
        run: |
          echo ${{ steps.login-aws-ecr.outputs.registry }}
          echo ${{ secrets.API_IMAGE_REPO }}
          docker build --build-arg DATABASE_URL=${{ secrets.DATABASE_URL }} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy-api:
    name: Deploy API to EC2
    runs-on: ubuntu-latest
    needs: build-api
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{secrets.AWS_REGION}}
      - name: Login to AWS ECR
        id: login-aws-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: echo DB URL
        run: |
          if [ -z "${{ secrets.DATABASE_URL  }}" ]; then
            echo "DATABASE_URL is not set!"
          else 
            echo "DATABASE_URL is set!"
          fi
      - name: Pull and Run Docker Image From ECR
        run: |
          command_id=$(aws ssm send-command \
          --document-name "AWS-RunShellScript" \
          --targets "Key=instanceids,Values=${{ secrets.INSTANCE_ID_1 }},${{ secrets.INSTANCE_ID_2 }}" \
          --comment "Pull Docker image and run it" \
          --parameters commands='[
            "aws ecr get-login-password --region us-west-1 | docker login --username AWS --password-stdin ${{ steps.login-aws-ecr.outputs.registry }}",
            "docker stop ${{ vars.API_CONTAINER_NAME }} || true",
            "docker rm ${{ vars.API_CONTAINER_NAME }} || true",
            "docker pull ${{ steps.login-aws-ecr.outputs.registry }}/${{secrets.API_IMAGE_REPO}}:latest",
            
          ]' --query "Command.CommandId" --output text)

          echo "$command_id"
          echo "command_id=$command_id" >> $GITHUB_ENV
      - name: Wait for Docker Commands to Complete on Instance 1
        run: |
          echo ${{ env.command_id }}
          aws ssm wait command-executed \
          --command-id ${{ env.command_id }} \
          --instance-id ${{ secrets.INSTANCE_ID_1 }} || true
      - name: Wait for Docker Commands to Complete on Instance 2
        run: |
          echo ${{ env.command_id }}
          aws ssm wait command-executed \
          --command-id ${{ env.command_id }} \
          --instance-id ${{ secrets.INSTANCE_ID_2 }} || true
      - name: Check Command Status
        run: |
          commandOutput=$(aws ssm list-commands --command-id ${{ env.command_id }} --output text) 

          echo $commandOutput
          status=$(aws ssm list-commands --command-id ${{ env.command_id }} --query "Commands[0].StatusDetails" --output json)

          echo $status

          if [ $status == "Success" ]; then
            echo "Command executed Successfully. API is up and running"
          else 
            echo "Command failed"
            exit 1
          fi

name: Deploy

on:
  push:
    branches: ["production"]

jobs:
  build-api:
    name: Build API Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        id: login-aws-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push API Image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-aws-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.API_IMAGE_REPO }}
          IMAGE_TAG: latest
        run: |
          echo ${{ steps.login-aws-ecr.outputs.registry }}
          echo ${{ secrets.API_IMAGE_REPO }}
          docker build --build-arg DATABASE_URL=${{ secrets.DATABASE_URL }} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  pull-api:
    name: Pull API onto EC2
    runs-on: ubuntu-latest
    needs: build-api
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{secrets.AWS_REGION}}
      - name: Login to AWS ECR
        id: login-aws-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Pull and Run Docker Image From ECR
        run: |
          docker_pull_command_id=$(aws ssm send-command \
          --document-name "AWS-RunShellScript" \
          --targets "Key=instanceIds,Values=${{ secrets.INSTANCE_ID_1 }},${{ secrets.INSTANCE_ID_2 }}" \
          --comment "Pull Docker image onto EC2" \
          --parameters commands='[
            "aws ecr get-login-password --region us-west-1 | docker login --username AWS --password-stdin ${{ steps.login-aws-ecr.outputs.registry }}",
            "docker rmi $(docker images -q) -f",
            "docker stop ${{ steps.login-aws-ecr.outputs.registry }}/${{secrets.API_IMAGE_REPO}}:latest",
            "docker pull ${{ steps.login-aws-ecr.outputs.registry }}/${{secrets.API_IMAGE_REPO}}:latest",
          ]' --query "Command.CommandId" --output text)

          echo "docker_pull_command_id=$docker_pull_command_id" >> $GITHUB_ENV
      - name: Wait for Docker Commands to Complete on Instance 1
        run: |
          aws ssm wait command-executed \
          --command-id ${{ env.docker_pull_command_id }} \
          --instance-id ${{ secrets.INSTANCE_ID_1 }} || true \
          --debug
      - name: Wait for Docker Commands to Complete on Instance 2
        run: |
          aws ssm wait command-executed \
          --command-id ${{ env.docker_pull_command_id }} \
          --instance-id ${{ secrets.INSTANCE_ID_2 }} || true \
          --debug
      - name: Check Command Status
        run: |
          docker_pull_commandOutput=$(aws ssm list-commands --command-id ${{ env.docker_pull_command_id }} --output json)
          echo $docker_pull_commandOutput | jq

          docker_pull_command_status=$(aws ssm list-commands --command-id ${{ env.docker_pull_command_id }} --query "Commands[0].StatusDetails" --output text)
          echo $docker_pull_command_status

          if [ $docker_pull_command_status == "Success" ]; then
            echo "Docker Image pulled SUCCESSFULLY onto EC2"
          else
            echo "Docker image FAILED to pull onto EC2"
            exit 1
          fi

  # run-api:
  #   name: Docker run api
  #   runs-on: ubuntu-latest
  #   needs: pull-api
  #   steps:
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{secrets.AWS_REGION}}
  #     - name: Login to AWS ECR
  #       id: login-aws-ecr
  #       uses: aws-actions/amazon-ecr-login@v2
  #     - name: Run API
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
  #         BUCKET_REGION: ${{ secrets.BUCKET_REGION }}
  #         CLOUDFRONT_DISTRIBUTION: ${{ secrets.CLOUDFRONT_DISTRIBUTION }}
  #         DATABASE_URL: ${{ secrets.DATABASE_URL }}
  #         EMAIL_ADDRESS: ${{ secrets.EMAIL_ADDRESS }}
  #         EMAIL_JWT_SECRET: ${{ secrets.EMAIL_JWT_SECRET }}
  #         EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
  #         KEY_PAIR_ID_TWO: ${{ secrets.KEY_PAIR_ID_TWO }}
  #         REDIS_HOST: ${{ secrets.REDIS_HOST }}
  #         REDIS_PORT: ${{ secrets.REDIS_PORT }}
  #         STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
  #         USER_LOGIN_JWT_SECRET: ${{ secrets.USER_LOGIN_JWT_SECRET }}
  #         API_CONTAINER_NAME: ${{ vars.API_CONTAINER_NAME }}
  #       run: |
  #         echo ${{ steps.login-aws-ecr.outputs.registry }}/${{secrets.API_IMAGE_REPO}}:latest
  #         docker_run_command_id=$(aws ssm send-command \
  #         --document-name "AWS-RunShellScript" \
  #         --targets "Key=instanceIds,Values=${{ secrets.INSTANCE_ID_1 }},${{ secrets.INSTANCE_ID_2 }}" \
  #         --comment "Run Docker Image" \
  #         --parameters commands='[
  #           "aws ecr get-login-password --region us-west-1 | docker login --username AWS --password-stdin ${{ steps.login-aws-ecr.outputs.registry }}",
  #           "docker run -p 3000:3000 \
  #           -e REDIS_HOST=${{ secrets.REDIS_HOST }} \
  #           -e REDIS_PORT=${{ secrets.REDIS_PORT }} \
  #           -e STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }} \
  #           -e EMAIL_JWT_SECRET=${{ secrets.EMAIL_JWT_SECRET }} \
  #           -e EMAIL_ADDRESS=${{ secrets.EMAIL_ADDRESS }} \
  #           -e EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }} \
  #           -e USER_LOGIN_JWT_SECRET=${{ secrets.USER_LOGIN_JWT_SECRET  }} \
  #           ${{secrets. ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest"
  #         ]' --query "Command.CommandId" --output text)

  #         echo "docker_run_command_id=$docker_run_command_id" >> $GITHUB_ENV
  #     - name: Wait for Docker RUN Command to Complete on Instance 1
  #       run: |
  #         aws ssm wait command-executed \
  #         --command-id ${{ env.docker_run_command_id }} \
  #         --instance-id ${{ secrets.INSTANCE_ID_1 }} || true \
  #         --debug
  #     - name: Wait for Docker RUN Command to Complete on Instance 2
  #       run: |
  #         aws ssm wait command-executed \
  #         --command-id ${{ env.docker_run_command_id }} \
  #         --instance-id ${{ secrets.INSTANCE_ID_2 }} || true \
  #         --debug
  #     - name: Check Command Status
  #       run: |
  #         docker_run_commandOutput=$(aws ssm list-commands --command-id ${{ env.docker_run_command_id }} --output json)
  #         echo $docker_run_commandOutput | jq

  #         docker_run_command_status=$(aws ssm list-commands --command-id ${{ env.docker_run_command_id }} --query "Commands[0].StatusDetails" --output text)
  #         echo $docker_run_command_status

  #         if [ $docker_run_command_status == "Success" ]; then
  #           echo "Command executed SUCCESSFULLY. API is up and running"
  #         else
  #           echo "Docker Container FAILED to start"
  #           exit 1
  #         fi
